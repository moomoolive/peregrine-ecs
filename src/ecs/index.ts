import {
    Veci32
} from "../dataStructures/veci32/index"
import {
    Table
} from "../table/index"
import {
    EntityRecord
} from "../entities/index"
import {
    componentRegistryMacro,
    ComponentRegistry,
} from "../dataStructures/registries/index"
import {
    ComponentsDeclaration,
    ComponentClasses,
    generateComponentClasses,
} from "../components/index"
import {Debugger} from "./debugger"
import {EntityMutator} from "../entities/mutator"

export class BaseEcs<
    T extends ComponentsDeclaration
> {
    /** entity ids that were recycled or not used yet */
    protected _unusedEntityIds: Veci32
    /** which archetype and row an entity resides in */
    protected _entityRecords: EntityRecord[]
    /** a table holds entities that have the exact same components */
    protected _tables: Table[]

    /* generated by macros */
    readonly components: ComponentRegistry<T>
    protected readonly _componentClasses: ComponentClasses
    /* ends here */

    readonly debugger: Debugger
    private readonly _mutator: EntityMutator

    constructor(params: {
        components: ComponentRegistry<T>,
        componentClasses: ComponentClasses
    }) {
        this._unusedEntityIds = new Veci32(1)
        this._entityRecords = []
        this._tables = []

        const {
            components,
            componentClasses
        } = params
        /* generated via macros */
        this.components = components
        this._componentClasses = componentClasses
        /* ends here */

        this.debugger = new Debugger(this)
        this._mutator = new EntityMutator(this)
    }

    updateEntity(entityId: number): EntityMutator {
        return this._mutator
    }
}

export interface EcsClass<T extends ComponentsDeclaration> {
    new(): BaseEcs<T>
}

export function defineEcs<
    T extends ComponentsDeclaration
>(params: {
    readonly components: T
}): EcsClass<T> {
    const {components: componentDeclaration} = params
    const componentClasses = generateComponentClasses(componentDeclaration)
    const components = componentRegistryMacro(componentDeclaration)
    return Function(`return (
        BaseEcs, componentClasses, components,
        Debugger
    ) => {
    return class GeneratedEcs extends BaseEcs {
        constructor() {
            super({
                componentClasses,
                components
            })
        }
    }
}`)()(
        BaseEcs, componentClasses, components,
        Debugger
    )
}
